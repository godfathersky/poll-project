@page "/poll"

@using System.ComponentModel.DataAnnotations
@using static MudBlazor.CategoryTypes
@using MudBlazor.Components

<PageTitle>Create poll</PageTitle>

<MudThemeProvider Theme="MyCustomTheme"></MudThemeProvider>

<div class="create-poll-form">
   <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
   <DataAnnotationsValidator/>
        <MudGrid Style="justify-content: center !important;">
            <MudItem xs="12" sm="7" Style="width: 50vw;">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Title" HelperText="Max. 50 characters"
                                      @bind-Value="model.Title" For="@(() => model.Title)"/>
                        <MudSelect @bind-Value="@voteType" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("Single choice")">Single choice</MudSelectItem>
                            <MudSelectItem Value="@("Multiple choice")">Multiple choice</MudSelectItem>
                            <MudSelectItem Value="@("TBH")">TBH</MudSelectItem>
                        </MudSelect>
                        <MudTextField Label="Option1" HelperText="Type a option 1" Class="mt-3"
                                      @bind-Value="model.Option1" For="@(() => model.Option1)"/>
                        <MudTextField Label="Option2" HelperText="Type a option 2" Class="mt-3"
                                      @bind-Value="model.Option2" For="@(() => model.Option2)"/>
                        @{
                            int i = 2;
                        }
                        @foreach (var option in options)
                        {
                            i++;
                            <MudTextField Label="Option2" HelperText="Type a option " Class="mt-3"
                                      @bind-Value="model.Option2" For="@(() => model.Option2)">@i</MudTextField>
                        }

                        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto" @onclick="AddOption">Add option</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto" @onclick="RemoveOption">Remove option</MudButton>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto">Create</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    RegisterAccountForm model = new RegisterAccountForm();
    List<string> options = new List<string>();
    string voteType = "Single choice";
    bool success;
    int i = 2;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(50, ErrorMessage = "Title length can't be more than 50.")]
        public string Title { get; set; }

        [Required]
        [EmailAddress]
        public string VotingType { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Option 1 length can't be more than 50.")]
        public string Option1 { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Option 2 length can't be more than 50.")]
        public string Option2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Grey.Darken4,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Grey.Darken4
        }
    };

    private void AddOption()
    {
        options.Add("option");
    }

    private void RemoveOption()
    {
        options.RemoveAt(options.Count() - 1);
    }
}